# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Nom du projet et du package
  projectName: 'devops-project'
  artifactName: 'devops-project-build.zip'
  artifactPath: '$(Build.ArtifactStagingDirectory)/$(artifactName)'

stages:
- stage: Build
  jobs:
  - job: BuildAndPackage
    steps:
    # Étape 1 : Installer Amazon Corretto 8 (Java 8)
    - script: |
        # Télécharger et installer Amazon Corretto 8 (Java 8)
        wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.deb
        sudo dpkg -i amazon-corretto-8-x64-linux-jdk.deb
        sudo apt-get update
        sudo apt-get install -f
        java -version  # Vérification de l'installation de Java
      displayName: 'Install Amazon Corretto 8'

    # Étape 2 : Configurer JAVA_HOME pour Maven
    - script: |
        # Configurer JAVA_HOME pour Maven
        export JAVA_HOME=/usr/lib/jvm/java-8-amazon-corretto
        export PATH=$JAVA_HOME/bin:$PATH
        java -version  # Vérification de l'environnement Java
      displayName: 'Set JAVA_HOME for Maven'

    # Étape 1 : Restaurer les dépendances depuis Azure Artifacts
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        options: '-s settings.xml'
        goals: 'dependency:resolve'  # Télécharge les dépendances

    # Étape 2 : Compiler le code
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        options: '-s settings.xml'
        goals: 'clean compile'

    # Étape 3 : Générer le fichier de build (JAR/WAR)
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        options: '-s settings.xml'
        goals: 'package'

    # Étape 4 : Compresser le fichier de build
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName)'
        replaceExistingArchive: true

    # Étape 5 : Publier l'artefact dans Azure DevOps (optionnel)
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: '$(artifactName)'
        targetPath: '$(Build.ArtifactStagingDirectory)'
        publishLocation: 'Container'

- stage: UploadToBlob
  dependsOn: Build
  jobs:
  - job: UploadToBlobStorage
    steps:
    # Étape 6 : Uploader le fichier de build dans Blob Storage
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'access-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az storage blob upload \
            --account-name fouedtrabelsi \
            --container-name devopsbuildartefact \
            --file $(Build.ArtifactStagingDirectory)/$(artifactName) \
            --name $(artifactName) \
            --auth-mode key